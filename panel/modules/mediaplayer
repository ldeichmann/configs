#!/usr/bin/env python3
"""
Display the current "artist - title" playing in nuvola.

@author Francois LASSERRE <choiz@me.com>
@license GNU GPL http://www.gnu.org/licenses/gpl.html
"""
from gi.repository import Playerctl
import dbus
from gi.repository import GObject
from dbus.mainloop.glib import DBusGMainLoop
from dbus.exceptions import DBusException
import sys


class MPRISNotifier(object):
    def __init__(self, player):
        """initialise."""
        bus_loop = DBusGMainLoop(set_as_default=True)
        self.bus = dbus.SessionBus(mainloop=bus_loop)
        loop = GObject.MainLoop()
        self.playername = player
        try:
            self.props_changed_listener()
        except DBusException as e:  # NOQA
            pass
        self.session_bus = self.bus.get_object("org.freedesktop.DBus",
                                               "/org/freedesktop/DBus")

        self.session_bus.connect_to_signal("NameOwnerChanged",
                                           self.handle_name_owner_changed,
                                           arg0="org.mpris.MediaPlayer2." +
                                           self.playername)

        loop.run()

    def props_changed_listener(self):
        """Hook up callback to PropertiesChanged event."""
        self.player = self.bus.get_object("org.mpris.MediaPlayer2." +
                                          self.playername,
                                          "/org/mpris/MediaPlayer2")

        self.player.connect_to_signal("PropertiesChanged",
                                      self.handle_properties_changed)
        print(self.buildString(), end="\n", flush=True)

    def handle_name_owner_changed(self, name, older_owner, new_owner):
        """Introspect the NameOwnerChanged signal to work out if MPRIS Player
        has started."""
        if name == ("org.mpris.MediaPlayer2." + self.playername):
            if new_owner:
                # GME has been launched - hook it up.
                self.props_changed_listener()
            else:
                self.player = None
                print("", end="\n", flush=True)

    def handle_properties_changed(self, interface, changed_props,
                                  invalidated_props):
        """Handle track changes."""
        print(self.buildString(), end="\n", flush=True)

    def buildString(self):
        cmd = 'playerctl --player=' + self.playername + ' '
        playercmdprev = "%{A2:"+cmd+"previous &:}"
        playercmdnext = "%{A3:"+cmd+"next &:}"
        playercmdpause = "%{A1:"+cmd+"play-pause &:}"
        try:
            player = Playerctl.Player(player_name=self.playername)
            playerstatus = player.props.status

            if playerstatus is None or playerstatus is 'None':
                return ''

            playbackicon = ''

            if "Playing" == playerstatus:
                playbackicon = ' '
            elif "Paused" == playerstatus:
                playbackicon = ' '
            elif "Stopped" == playerstatus:
                playbackicon = ' '

            artist = player.get_artist()
            title = player.get_title()

            if artist and title:
                return playercmdpause + playercmdprev \
                    + playercmdnext + playbackicon \
                    + artist + ' - ' + title + "%{A}%{A}%{A}"
            else:
                return ' Not Playing'

        except:
            return 'Except'

if __name__ == "__main__":
    if len(sys.argv) > 1:
        MPRISNotifier(sys.argv[1])
